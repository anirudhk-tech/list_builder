[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Lead",
        "importPath": "app.models.lead",
        "description": "app.models.lead",
        "isExtraImport": true,
        "detail": "app.models.lead",
        "documentation": {}
    },
    {
        "label": "Lead",
        "importPath": "app.models.lead",
        "description": "app.models.lead",
        "isExtraImport": true,
        "detail": "app.models.lead",
        "documentation": {}
    },
    {
        "label": "Lead",
        "importPath": "app.models.lead",
        "description": "app.models.lead",
        "isExtraImport": true,
        "detail": "app.models.lead",
        "documentation": {}
    },
    {
        "label": "Lead",
        "importPath": "app.models.lead",
        "description": "app.models.lead",
        "isExtraImport": true,
        "detail": "app.models.lead",
        "documentation": {}
    },
    {
        "label": "scrape",
        "importPath": "app.scrapers.spiders.base",
        "description": "app.scrapers.spiders.base",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.base",
        "documentation": {}
    },
    {
        "label": "run_in_threadpool",
        "importPath": "starlette.concurrency",
        "description": "starlette.concurrency",
        "isExtraImport": true,
        "detail": "starlette.concurrency",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "HTTPAdapter",
        "importPath": "requests.adapters",
        "description": "requests.adapters",
        "isExtraImport": true,
        "detail": "requests.adapters",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "app.logging_config",
        "description": "app.logging_config",
        "isExtraImport": true,
        "detail": "app.logging_config",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "app.logging_config",
        "description": "app.logging_config",
        "isExtraImport": true,
        "detail": "app.logging_config",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "app.logging_config",
        "description": "app.logging_config",
        "isExtraImport": true,
        "detail": "app.logging_config",
        "documentation": {}
    },
    {
        "label": "configure_root_logger",
        "importPath": "app.logging_config",
        "description": "app.logging_config",
        "isExtraImport": true,
        "detail": "app.logging_config",
        "documentation": {}
    },
    {
        "label": "configure_root_logger",
        "importPath": "app.logging_config",
        "description": "app.logging_config",
        "isExtraImport": true,
        "detail": "app.logging_config",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "urllib.robotparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.robotparser",
        "description": "urllib.robotparser",
        "detail": "urllib.robotparser",
        "documentation": {}
    },
    {
        "label": "ROBOTS_URL",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "HEADERS",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "URL",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "SESSION",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "POLITE_PAUSE_RANGE",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "HEADERS",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "URL",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "MAX_DEPTH",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "USERNAME_PREFIXES",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "SESSION",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "ALGOLIA_API_KEY",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "ALGOLIA_APP_ID",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "HEAVY_PAUSE_RANGE",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "SUPER_HEAVY_PAUSE_RANGE",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "HEADERS",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "USER_AGENTS",
        "importPath": "app.scrapers.spiders.indiehackers.config",
        "description": "app.scrapers.spiders.indiehackers.config",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "Timeout",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "ContactInfo",
        "importPath": "server.app.models.lead",
        "description": "server.app.models.lead",
        "isExtraImport": true,
        "detail": "server.app.models.lead",
        "documentation": {}
    },
    {
        "label": "fetch_all_leads",
        "importPath": "app.scrapers.spiders.indiehackers.fetch",
        "description": "app.scrapers.spiders.indiehackers.fetch",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.fetch",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "scrape_indiehackers",
        "importPath": "app.scrapers.spiders.indiehackers.scrape",
        "description": "app.scrapers.spiders.indiehackers.scrape",
        "isExtraImport": true,
        "detail": "app.scrapers.spiders.indiehackers.scrape",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.v1.endpoints.health",
        "description": "app.api.v1.endpoints.health",
        "isExtraImport": true,
        "detail": "app.api.v1.endpoints.health",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.v1.endpoints.leads",
        "description": "app.api.v1.endpoints.leads",
        "isExtraImport": true,
        "detail": "app.api.v1.endpoints.leads",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "client.node_modules.flatted.python.flatted",
        "description": "client.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "client.node_modules.flatted.python.flatted",
        "description": "client.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "client.node_modules.flatted.python.flatted",
        "description": "client.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "client.node_modules.flatted.python.flatted",
        "description": "client.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "HealthStatus",
        "kind": 6,
        "importPath": "server.app.api.v1.endpoints.health",
        "description": "server.app.api.v1.endpoints.health",
        "peekOfCode": "class HealthStatus(BaseModel):\n    status: str\n@router.get(\"/health\", response_model=HealthStatus, tags=[\"Health\"])\nasync def health_check() -> HealthStatus:\n    \"\"\"\n    Health check endpoint to verify if the API is running.\n    Returns a simple JSON response indicating the status of the API.\n    \"\"\"\n    return HealthStatus(status=\"ok\")",
        "detail": "server.app.api.v1.endpoints.health",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.app.api.v1.endpoints.health",
        "description": "server.app.api.v1.endpoints.health",
        "peekOfCode": "router = APIRouter()\nclass HealthStatus(BaseModel):\n    status: str\n@router.get(\"/health\", response_model=HealthStatus, tags=[\"Health\"])\nasync def health_check() -> HealthStatus:\n    \"\"\"\n    Health check endpoint to verify if the API is running.\n    Returns a simple JSON response indicating the status of the API.\n    \"\"\"\n    return HealthStatus(status=\"ok\")",
        "detail": "server.app.api.v1.endpoints.health",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.app.api.v1.endpoints.leads",
        "description": "server.app.api.v1.endpoints.leads",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/leads\", response_model=list[Lead], tags=[\"Leads\"])\nasync def get_leads(\n    limit: Optional[int] = Query(None, description=\"Number of leads to return\", ge=1),\n):\n    \"\"\"\n    Retrieve a list of leads with optional filtering by type and pagination.\n    - **type**: Optional filter to get leads of a specific type.\n    - **limit**: Number of leads to return (default is None).\n    \"\"\"",
        "detail": "server.app.api.v1.endpoints.leads",
        "documentation": {}
    },
    {
        "label": "ContactInfo",
        "kind": 6,
        "importPath": "server.app.models.lead",
        "description": "server.app.models.lead",
        "peekOfCode": "class ContactInfo(BaseModel):\n    method: str  # e.g. \"email\", \"twitter\", \"linkedin\"\n    value: str  # e.g. \"user@example.com\", \"@handle\"\nclass EngagementMetrics(BaseModel):\n    followers: Optional[int]\n    public_repos: Optional[int]  # for GitHub\n    recent_posts: Optional[int]  # posts in last 30 days\n    last_active: Optional[datetime]  # last timestamp we saw activity\nclass Lead(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))",
        "detail": "server.app.models.lead",
        "documentation": {}
    },
    {
        "label": "EngagementMetrics",
        "kind": 6,
        "importPath": "server.app.models.lead",
        "description": "server.app.models.lead",
        "peekOfCode": "class EngagementMetrics(BaseModel):\n    followers: Optional[int]\n    public_repos: Optional[int]  # for GitHub\n    recent_posts: Optional[int]  # posts in last 30 days\n    last_active: Optional[datetime]  # last timestamp we saw activity\nclass Lead(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    name: Optional[str] = None  # e.g. \"John Doe\"\n    username: Optional[str] = None  # e.g. \"johndoe\"\n    profile_url: Optional[HttpUrl] = None",
        "detail": "server.app.models.lead",
        "documentation": {}
    },
    {
        "label": "Lead",
        "kind": 6,
        "importPath": "server.app.models.lead",
        "description": "server.app.models.lead",
        "peekOfCode": "class Lead(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    name: Optional[str] = None  # e.g. \"John Doe\"\n    username: Optional[str] = None  # e.g. \"johndoe\"\n    profile_url: Optional[HttpUrl] = None\n    title: Optional[str] = None  # e.g. \"Full-Stack Engineer\"\n    bio: Optional[str] = None\n    website: Optional[HttpUrl] = None  # e.g. \"https://example.com\"\n    location: Optional[str] = None\n    source: str  # “indiehackers”, “github”, etc.",
        "detail": "server.app.models.lead",
        "documentation": {}
    },
    {
        "label": "ROBOTS_URL",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "ROBOTS_URL = \"https://indiehackers.com/robots.txt\"\nALGOLIA_APP_ID = \"N86T1R3OWZ\"\nALGOLIA_API_KEY = \"5140dac5e87f47346abbda1a34ee70c3\"\nINDEX = \"users\"\nURL = f\"https://{ALGOLIA_APP_ID}-dsn.algolia.net/1/indexes/{INDEX}/query\"\nMAX_DEPTH = 10\nUSERNAME_PREFIXES = list(\"abcdefghijklmnopqrstuvwxyz0123456789_-.\")\nSESSION = requests.Session()\nADAPTER: HTTPAdapter = HTTPAdapter(max_retries=3)\nSESSION.mount(\"https://\", ADAPTER)",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "ALGOLIA_APP_ID",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "ALGOLIA_APP_ID = \"N86T1R3OWZ\"\nALGOLIA_API_KEY = \"5140dac5e87f47346abbda1a34ee70c3\"\nINDEX = \"users\"\nURL = f\"https://{ALGOLIA_APP_ID}-dsn.algolia.net/1/indexes/{INDEX}/query\"\nMAX_DEPTH = 10\nUSERNAME_PREFIXES = list(\"abcdefghijklmnopqrstuvwxyz0123456789_-.\")\nSESSION = requests.Session()\nADAPTER: HTTPAdapter = HTTPAdapter(max_retries=3)\nSESSION.mount(\"https://\", ADAPTER)\nPOLITE_PAUSE_RANGE = (0.5, 1.5)  # seconds",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "ALGOLIA_API_KEY",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "ALGOLIA_API_KEY = \"5140dac5e87f47346abbda1a34ee70c3\"\nINDEX = \"users\"\nURL = f\"https://{ALGOLIA_APP_ID}-dsn.algolia.net/1/indexes/{INDEX}/query\"\nMAX_DEPTH = 10\nUSERNAME_PREFIXES = list(\"abcdefghijklmnopqrstuvwxyz0123456789_-.\")\nSESSION = requests.Session()\nADAPTER: HTTPAdapter = HTTPAdapter(max_retries=3)\nSESSION.mount(\"https://\", ADAPTER)\nPOLITE_PAUSE_RANGE = (0.5, 1.5)  # seconds\nHEAVY_PAUSE_RANGE = (8, 15)  # seconds",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "INDEX",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "INDEX = \"users\"\nURL = f\"https://{ALGOLIA_APP_ID}-dsn.algolia.net/1/indexes/{INDEX}/query\"\nMAX_DEPTH = 10\nUSERNAME_PREFIXES = list(\"abcdefghijklmnopqrstuvwxyz0123456789_-.\")\nSESSION = requests.Session()\nADAPTER: HTTPAdapter = HTTPAdapter(max_retries=3)\nSESSION.mount(\"https://\", ADAPTER)\nPOLITE_PAUSE_RANGE = (0.5, 1.5)  # seconds\nHEAVY_PAUSE_RANGE = (8, 15)  # seconds\nSUPER_HEAVY_PAUSE_RANGE = (30, 60)  # seconds",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "URL",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "URL = f\"https://{ALGOLIA_APP_ID}-dsn.algolia.net/1/indexes/{INDEX}/query\"\nMAX_DEPTH = 10\nUSERNAME_PREFIXES = list(\"abcdefghijklmnopqrstuvwxyz0123456789_-.\")\nSESSION = requests.Session()\nADAPTER: HTTPAdapter = HTTPAdapter(max_retries=3)\nSESSION.mount(\"https://\", ADAPTER)\nPOLITE_PAUSE_RANGE = (0.5, 1.5)  # seconds\nHEAVY_PAUSE_RANGE = (8, 15)  # seconds\nSUPER_HEAVY_PAUSE_RANGE = (30, 60)  # seconds\nUSER_AGENTS = [",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "MAX_DEPTH",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "MAX_DEPTH = 10\nUSERNAME_PREFIXES = list(\"abcdefghijklmnopqrstuvwxyz0123456789_-.\")\nSESSION = requests.Session()\nADAPTER: HTTPAdapter = HTTPAdapter(max_retries=3)\nSESSION.mount(\"https://\", ADAPTER)\nPOLITE_PAUSE_RANGE = (0.5, 1.5)  # seconds\nHEAVY_PAUSE_RANGE = (8, 15)  # seconds\nSUPER_HEAVY_PAUSE_RANGE = (30, 60)  # seconds\nUSER_AGENTS = [\n    # Desktop – Chrome on Windows 10",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "USERNAME_PREFIXES",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "USERNAME_PREFIXES = list(\"abcdefghijklmnopqrstuvwxyz0123456789_-.\")\nSESSION = requests.Session()\nADAPTER: HTTPAdapter = HTTPAdapter(max_retries=3)\nSESSION.mount(\"https://\", ADAPTER)\nPOLITE_PAUSE_RANGE = (0.5, 1.5)  # seconds\nHEAVY_PAUSE_RANGE = (8, 15)  # seconds\nSUPER_HEAVY_PAUSE_RANGE = (30, 60)  # seconds\nUSER_AGENTS = [\n    # Desktop – Chrome on Windows 10\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\"",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "SESSION",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "SESSION = requests.Session()\nADAPTER: HTTPAdapter = HTTPAdapter(max_retries=3)\nSESSION.mount(\"https://\", ADAPTER)\nPOLITE_PAUSE_RANGE = (0.5, 1.5)  # seconds\nHEAVY_PAUSE_RANGE = (8, 15)  # seconds\nSUPER_HEAVY_PAUSE_RANGE = (30, 60)  # seconds\nUSER_AGENTS = [\n    # Desktop – Chrome on Windows 10\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\"\n    \" Chrome/114.0.5735.199 Safari/537.36\",",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "POLITE_PAUSE_RANGE",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "POLITE_PAUSE_RANGE = (0.5, 1.5)  # seconds\nHEAVY_PAUSE_RANGE = (8, 15)  # seconds\nSUPER_HEAVY_PAUSE_RANGE = (30, 60)  # seconds\nUSER_AGENTS = [\n    # Desktop – Chrome on Windows 10\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\"\n    \" Chrome/114.0.5735.199 Safari/537.36\",\n    # Desktop – Firefox on Windows 11\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:116.0) Gecko/20100101 Firefox/116.0\",\n    # Desktop – Edge on Windows 10",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "HEAVY_PAUSE_RANGE",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "HEAVY_PAUSE_RANGE = (8, 15)  # seconds\nSUPER_HEAVY_PAUSE_RANGE = (30, 60)  # seconds\nUSER_AGENTS = [\n    # Desktop – Chrome on Windows 10\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\"\n    \" Chrome/114.0.5735.199 Safari/537.36\",\n    # Desktop – Firefox on Windows 11\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:116.0) Gecko/20100101 Firefox/116.0\",\n    # Desktop – Edge on Windows 10\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\"",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "SUPER_HEAVY_PAUSE_RANGE",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "SUPER_HEAVY_PAUSE_RANGE = (30, 60)  # seconds\nUSER_AGENTS = [\n    # Desktop – Chrome on Windows 10\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\"\n    \" Chrome/114.0.5735.199 Safari/537.36\",\n    # Desktop – Firefox on Windows 11\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:116.0) Gecko/20100101 Firefox/116.0\",\n    # Desktop – Edge on Windows 10\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\"\n    \" Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.67\",",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "USER_AGENTS",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "USER_AGENTS = [\n    # Desktop – Chrome on Windows 10\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\"\n    \" Chrome/114.0.5735.199 Safari/537.36\",\n    # Desktop – Firefox on Windows 11\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:116.0) Gecko/20100101 Firefox/116.0\",\n    # Desktop – Edge on Windows 10\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\"\n    \" Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.67\",\n    # Desktop – Safari on macOS Ventura",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "HEADERS",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.config",
        "description": "server.app.scrapers.spiders.indiehackers.config",
        "peekOfCode": "HEADERS = {\n    \"X-Algolia-Application-Id\": ALGOLIA_APP_ID,\n    \"X-Algolia-API-Key\": ALGOLIA_API_KEY,\n    \"Content-Type\": \"application/json\",\n}",
        "detail": "server.app.scrapers.spiders.indiehackers.config",
        "documentation": {}
    },
    {
        "label": "fetch_leads_for_prefix",
        "kind": 2,
        "importPath": "server.app.scrapers.spiders.indiehackers.fetch",
        "description": "server.app.scrapers.spiders.indiehackers.fetch",
        "peekOfCode": "def fetch_leads_for_prefix(prefix: str, seen: set[str]) -> list[Lead]:\n    prefix_leads: list[Lead] = []\n    payload: dict[str, typing.Any] = {\n        \"query\": prefix,\n        \"hitsPerPage\": 1000,\n        \"restrictSearchableAttributes\": [\"username\"],\n        \"queryType\": \"prefixAll\",\n        \"typoTolerance\": False,\n    }\n    for backoff in (",
        "detail": "server.app.scrapers.spiders.indiehackers.fetch",
        "documentation": {}
    },
    {
        "label": "fetch_all_leads",
        "kind": 2,
        "importPath": "server.app.scrapers.spiders.indiehackers.fetch",
        "description": "server.app.scrapers.spiders.indiehackers.fetch",
        "peekOfCode": "def fetch_all_leads(limit: typing.Optional[int] = None) -> list[Lead]:\n    \"\"\"Fetch all leads from Indie Hackers.\"\"\"\n    leads: list[Lead] = []\n    seen: set[str] = set()\n    remaining = limit if limit else None\n    with open(\"ih_buckets.json\", \"r\") as f:\n        subdivisions = json.load(f)\n    for idx, prefix in enumerate(\n        subdivisions, 1\n    ):  # Step 1: Iterate through each prefix of precomputed subdivisions",
        "detail": "server.app.scrapers.spiders.indiehackers.fetch",
        "documentation": {}
    },
    {
        "label": "rp",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.fetch",
        "description": "server.app.scrapers.spiders.indiehackers.fetch",
        "peekOfCode": "rp = urllib.robotparser.RobotFileParser()\nrp.set_url(ROBOTS_URL)\nrp.read()\nlogger = get_logger(__name__)\ndef fetch_leads_for_prefix(prefix: str, seen: set[str]) -> list[Lead]:\n    prefix_leads: list[Lead] = []\n    payload: dict[str, typing.Any] = {\n        \"query\": prefix,\n        \"hitsPerPage\": 1000,\n        \"restrictSearchableAttributes\": [\"username\"],",
        "detail": "server.app.scrapers.spiders.indiehackers.fetch",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.fetch",
        "description": "server.app.scrapers.spiders.indiehackers.fetch",
        "peekOfCode": "logger = get_logger(__name__)\ndef fetch_leads_for_prefix(prefix: str, seen: set[str]) -> list[Lead]:\n    prefix_leads: list[Lead] = []\n    payload: dict[str, typing.Any] = {\n        \"query\": prefix,\n        \"hitsPerPage\": 1000,\n        \"restrictSearchableAttributes\": [\"username\"],\n        \"queryType\": \"prefixAll\",\n        \"typoTolerance\": False,\n    }",
        "detail": "server.app.scrapers.spiders.indiehackers.fetch",
        "documentation": {}
    },
    {
        "label": "scrape_indiehackers",
        "kind": 2,
        "importPath": "server.app.scrapers.spiders.indiehackers.scrape",
        "description": "server.app.scrapers.spiders.indiehackers.scrape",
        "peekOfCode": "def scrape_indiehackers(limit: typing.Optional[int] = None) -> list[Lead]:\n    \"\"\"Main entry: scrape all author leads from Indie Hackers sitemaps.\"\"\"\n    leads = fetch_all_leads(limit)\n    return leads",
        "detail": "server.app.scrapers.spiders.indiehackers.scrape",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.scrape",
        "description": "server.app.scrapers.spiders.indiehackers.scrape",
        "peekOfCode": "logger = get_logger(__name__)\ndef scrape_indiehackers(limit: typing.Optional[int] = None) -> list[Lead]:\n    \"\"\"Main entry: scrape all author leads from Indie Hackers sitemaps.\"\"\"\n    leads = fetch_all_leads(limit)\n    return leads",
        "detail": "server.app.scrapers.spiders.indiehackers.scrape",
        "documentation": {}
    },
    {
        "label": "build_subdivision",
        "kind": 2,
        "importPath": "server.app.scrapers.spiders.indiehackers.utils",
        "description": "server.app.scrapers.spiders.indiehackers.utils",
        "peekOfCode": "def build_subdivision(\n    threshold: int = 1000,\n    max_depth: int = MAX_DEPTH,\n    prefixes: list[str] = USERNAME_PREFIXES,\n):\n    \"\"\"Build a subdivision string based on the prefix and depth.\"\"\"\n    subdivisions: list[str] = []\n    backoff = 1\n    queue = deque(\n        (p, 1) for p in prefixes",
        "detail": "server.app.scrapers.spiders.indiehackers.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.app.scrapers.spiders.indiehackers.utils",
        "description": "server.app.scrapers.spiders.indiehackers.utils",
        "peekOfCode": "logger = get_logger(__name__)\ndef build_subdivision(\n    threshold: int = 1000,\n    max_depth: int = MAX_DEPTH,\n    prefixes: list[str] = USERNAME_PREFIXES,\n):\n    \"\"\"Build a subdivision string based on the prefix and depth.\"\"\"\n    subdivisions: list[str] = []\n    backoff = 1\n    queue = deque(",
        "detail": "server.app.scrapers.spiders.indiehackers.utils",
        "documentation": {}
    },
    {
        "label": "scrape",
        "kind": 2,
        "importPath": "server.app.scrapers.spiders.base",
        "description": "server.app.scrapers.spiders.base",
        "peekOfCode": "def scrape(limit: int) -> list[Lead]:\n    \"\"\"\n    Scrapes for data across all spiders and returns a list of leads.\n    \"\"\"\n    leads = scrape_indiehackers(limit)\n    return leads",
        "detail": "server.app.scrapers.spiders.base",
        "documentation": {}
    },
    {
        "label": "configure_root_logger",
        "kind": 2,
        "importPath": "server.app.logging_config",
        "description": "server.app.logging_config",
        "peekOfCode": "def configure_root_logger(logfile: str = \"logs/app.log\"):\n    for h in logging.root.handlers[:]: # Clear out any old handlers\n        logging.root.removeHandler(h)\n    log_path = Path(logfile)\n    log_path.parent.mkdir(parents=True, exist_ok=True)\n    # (1) Create a rotating file handler\n    file_handler = RotatingFileHandler(\n        filename=str(logfile),\n        mode=\"a\",              # append\n        maxBytes=10 * 1024**2, # rotate after ~10 MB",
        "detail": "server.app.logging_config",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "kind": 2,
        "importPath": "server.app.logging_config",
        "description": "server.app.logging_config",
        "peekOfCode": "def get_logger(name: str) -> logging.Logger:\n    # make sure you've already called configure_root_logger()\n    return logging.getLogger(name)",
        "detail": "server.app.logging_config",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "server.app.main",
        "description": "server.app.main",
        "peekOfCode": "def create_app() -> FastAPI:\n    configure_root_logger()\n    app = FastAPI(\n        title=\"Lead Scraper API\",\n        version=\"0.1.0\",\n        docs_url=\"/docs\",\n        openapi_url=\"/openapi.json\",\n    )\n    app.include_router(health_router, prefix=\"/api/v1\")\n    app.include_router(leads_router, prefix=\"/api/v1\")",
        "detail": "server.app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server.app.main",
        "description": "server.app.main",
        "peekOfCode": "app = create_app()",
        "detail": "server.app.main",
        "documentation": {}
    }
]